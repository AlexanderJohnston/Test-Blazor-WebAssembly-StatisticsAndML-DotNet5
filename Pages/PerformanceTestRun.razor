@page "/PerformanceTestRun"

<button class="btn btn-primary" @onclick="StartPerformanceTest">Start Performance Test</button>
<button class="btn btn-primary" @onclick="CancelPerformanceTest">Cancel Performance Test</button>

@if (performanceTests.Count > 0)
{
<div>@performanceRunMessage</div>
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Test Name</th>
            <th>Time</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var performanceResult in performanceTests)
        {
            <tr>
                <td>@performanceResult.ID</td>
                <td>@performanceResult.GetTestName()</td>
                <td>@performanceResult.TestDuration</td>
            </tr>
        }
        <tr>
            <th>@("Total Tests: " + performanceTests.Count.ToString())</th>
            <th>All Tests</th>
            <th>@performanceTests.Sum(a => a.TestDuration).ToString()</th>
        </tr>
    </tbody>
</table>
}

@code {
    private string performanceRunMessage = "Running Test...";
    private bool cancelPerformanceTest = false;


    List<PerformanceTest> performanceTests = new List<PerformanceTest>();

    private async Task StartPerformanceTest()
    {
        List<PerformanceTest> performanceTestHarness = new List<PerformanceTest>();
        performanceTestHarness.AddRange(new List<PerformanceTest>
    {
            new PerformanceTest { ID = 1, DistributionName = "Binomial", SamplesNumber = 1000, TrialsNumber = 1000 },
            new PerformanceTest { ID = 2, DistributionName = "Binomial", SamplesNumber = 2000, TrialsNumber = 500 },
            new PerformanceTest { ID = 3, DistributionName = "Binomial", SamplesNumber = 3000, TrialsNumber = 3000 },
            new PerformanceTest { ID = 4, DistributionName = "Binomial", SamplesNumber = 1200, TrialsNumber = 2000 }
        });

        foreach (var performanceTest in performanceTestHarness)
        {
            if (this.cancelPerformanceTest != true)
            {
                performanceTest.TestDuration = performanceTest.TakeSamples();
                performanceTests.Add(performanceTest);
                await Task.Delay(1000); // Await Delay to give control back to user to cancel
                base.StateHasChanged();
            }
        };

        if (!this.cancelPerformanceTest)
        {
            this.performanceRunMessage = "Completed Run";
        }
    }

    private void CancelPerformanceTest()
    {
        this.cancelPerformanceTest = true;
        this.performanceRunMessage = "Cancelled Run";
    }

    private async Task<PerformanceTest> PerformPerformanceTestTypeAsync(PerformanceTest performanceTest)
    {
        performanceTest.TestDuration = performanceTest.TakeSamples();
        await Task.Delay(100);
        base.StateHasChanged();

        return performanceTest;
    }
}